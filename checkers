#checkers :)
#im terrible at optimization

import time
import random
import os
import sys
from termcolor import *

def wait(x):
  time.sleep(x)

def clear():
  if os.name=="nt":    
    c=os.system("cls")
  else:
    c=os.system("clear")
  del c

#8| A8 B8 C8 D8 E8 F8 G8 H8
#7| A7 B7 C7 D7 E7 F7 G7 H7
#6| A6 B6 C6 D6 E6 F6 G6 H6
#5| A5 B5 C5 D5 E5 F5 G5 H5
#4| A4 B4 C4 D4 E4 F4 G4 H4
#3| A3 B3 C3 D3 E3 F3 G3 H3
#2| A2 B2 C2 D2 E2 F2 G2 H2
#1| A1 B1 C1 D1 E1 F1 G1 H1
#  ________________________
#  A  B  C  D  E  F  G  H

playercount=3
finished=0
P1_lose=False
P2_lose=False
player_turn=1
pieces_player1=[["X"],["ùïè"]] #double struck X
pieces_player2=[["O"],["ùïÜ"]] #double struck O
pieces_king=[["ùïè"],["ùïÜ"]]
piece_selection=''
piece_moveto=''
squares_adjacent=['','','','']
squares_adjacent_open=['','','','']
pieces_jumpable=['','','','']
pieces_jumpable_open=['','','','']
a="1"
b="2"
c="3"
d="4"
e="5"
f="6"
g="7"
h="8"
array_abc=["a","b","c","d","e","f","g","h"]
array_123=["1","2","3","4","5","6","7","8"]
a8=["R"];b8=["O"];c8=["R"];d8=["O"];e8=["R"];f8=["O"];g8=["R"];h8=["O"]
a7=["O"];b7=["R"];c7=["O"];d7=["R"];e7=["O"];f7=["R"];g7=["O"];h7=["R"]
a6=["R"];b6=["O"];c6=["R"];d6=["O"];e6=["R"];f6=["O"];g6=["R"];h6=["O"]
a5=["B"];b5=["R"];c5=["B"];d5=["R"];e5=["B"];f5=["R"];g5=["B"];h5=["R"]
a4=["R"];b4=["B"];c4=["R"];d4=["B"];e4=["R"];f4=["B"];g4=["R"];h4=["B"]
a3=["X"];b3=["R"];c3=["X"];d3=["R"];e3=["X"];f3=["R"];g3=["X"];h3=["R"]
a2=["R"];b2=["X"];c2=["R"];d2=["X"];e2=["R"];f2=["X"];g2=["R"];h2=["X"]
a1=["X"];b1=["R"];c1=["X"];d1=["R"];e1=["X"];f1=["R"];g1=["X"];h1=["R"]

board=["a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1"]

def print_board():
  cprint("   "*10,"grey","on_white")
  for n in range(0,8):
    cprint(" "+array_123[-n-1]+" ","grey","on_white",end='')
    for i in range(0,8):
      if eval(array_abc[i]+array_123[-n-1])[0]=="R":
        cprint("   ",None,"on_red",end='')
      elif eval(array_abc[i]+array_123[-n-1])[0]=="B":
        cprint("   ",None,None,end='')
      else:
        cprint(" "+eval(array_abc[i]+array_123[-n-1])[0]+" ",None,None,end='')
    cprint("   ","grey","on_white",end="\n")
  cprint("   ","grey","on_white",end='')
  for i in range(0,8):
    cprint(" "+array_abc[i].upper()+" ","grey","on_white",end='')
  cprint("   ","grey","on_white",end="\n")

def print_help_playercount():
  print("Press 1 to play against a computer")
  print("Press 2 to play with a friend")
  print()
  print()

def print_help():
  print("Use the coordinates on the sides of the board")
  print("Select the piece you want to move")
  print("Select where you want that piece to move")
  print("Hint: Use A1, B2, etc.")

def check_finished():
  global P1_lose
  global P2_lose
  global finished
  for i in range(0,len(board)):
    if eval(board[i]) in pieces_player1:
      P1_lose=False
      finished=0
      break
    else:
      P1_lose=True
      finished=1
  for i in range(0,len(board)):
    if eval(board[i]) in pieces_player2:
      P2_lose=False
      finished=0
      break
    else:
      P2_lose=True
      finished=1

def check_king():
  if eval(board[1])==["X"]:
    eval(board[1])[0]="ùïè"
  if eval(board[3])==["X"]:
    eval(board[3])[0]="ùïè"
  if eval(board[5])==["X"]:
    eval(board[5])[0]="ùïè"
  if eval(board[7])==["X"]:
    eval(baord[7])[0]="ùïè"
  if eval(board[56])==["O"]:
    eval(board[56])[0]="ùïÜ"
  if eval(board[58])==["O"]:
    eval(board[58])[0]="ùïÜ"
  if eval(board[60])==["O"]:
    eval(board[60])[0]="ùïÜ"
  if eval(board[63])==["O"]:
    eval(board[63])[0]="ùïÜ"

def check_squares_adjacent_open():
  global piece_selection
  global squares_adjacent
  global squares_adjacent_open
  global pieces_jumpable
  global pieces_jumpable_open
  no_L=False
  no_R=False
  no_D=False
  no_U=False
  if len(piece_selection.split("a"))==2:
    no_L=True
  if len(piece_selection.split("h"))==2:
    no_R=True
  if len(piece_selection.split("1"))==2:
    no_D=True
  if len(piece_selection.split("8"))==2:
    no_U=True
  if no_L==False and no_U==False:
    squares_adjacent[0]=board[board.index(piece_selection)-9]
  if no_R==False and no_U==False:
    squares_adjacent[1]=board[board.index(piece_selection)-7]
  if no_L==False and no_D==False:
    squares_adjacent[2]=board[board.index(piece_selection)+7]
  if no_R==False and no_D==False:
    squares_adjacent[3]=board[board.index(piece_selection)+9]
  for i in range(0,4):
    if squares_adjacent[i]!='':
      if eval(squares_adjacent[i])==["B"]:
        squares_adjacent_open[i]=squares_adjacent[i]
  if eval(piece_selection)==["X"]:
    squares_adjacent_open[2]=''
    squares_adjacent_open[3]=''
  if eval(piece_selection)==["O"]:
    squares_adjacent_open[0]=''
    squares_adjacent_open[1]=''

def check_pieces_jumpable_open():
  global piece_selection
  global squares_adjacent
  global squares_adjacent_open
  global pieces_jumpable
  global pieces_jumpable_open
  global pieces_player1
  global pieces_player2
  global player_turn
  if player_turn==1:
    temp_var3=2
  else:
    temp_var3=1
  temp_var=0
  while True:
    try:
      for i in range(temp_var,4):
        if eval(squares_adjacent[i]) in eval("pieces_player"+str(temp_var3)):
          pieces_jumpable[i]=squares_adjacent[i]
      break
    except:
      if temp_var!=4:
        temp_var+=1
      else:
        break
  temp_var2=[-18,-14,14,18]
  while True:
    try:
      for i in range(temp_var,4):
        pieces_jumpable_open[i]=board[board.index(piece_selection)+temp_var2[i]]
      break
    except:
      if temp_var!=4:
        temp_var+=1
      else:
        break
  if eval(piece_selection)==["X"]:
    pieces_jumpable_open[2]=''
    pieces_jumpable_open[3]=''
  if eval(piece_selection)==["O"]:
    pieces_jumpable_open[0]=''
    pieces_jumpable_open[1]=''

def player1_turn():
  global piece_selection
  global piece_moveto
  global message
  print(message)
  while True:
    try:
      piece_selection=input().lower()
      if piece_selection=="quit()" or piece_selection not in board:
        message="That is not a place on the board!"
        print(this)
      elif eval(piece_selection) in pieces_player2:
        message="That is not your piece!"
        print(this)
      elif eval(piece_selection)==["R"]:
        message="There arent any pieces on red squares!"
        print(this)
      elif eval(piece_selection)==["B"]:
        message="You dont have a piece on that square!"
        print(this)
      check_squares_adjacent_open()
      check_pieces_jumpable_open()
      if squares_adjacent_open==['','','',''] and pieces_jumpable_open==['','','','']:
        message="There are no open squares for that piece to move to!"
        print(this)
      message=''
      break
    except:
      clear()
      print_help()
      print_board()
      print(message)
  while True:
    try:
      clear()
      print_help()
      print_board()
      print("Selected "+piece_selection.upper())
      print(message)
      piece_moveto=input().lower()
      if piece_moveto=="quit()" or piece_moveto not in board:
        message="That is not a place on the board!"
        print(this)
      elif piece_selection==piece_moveto:
        message="You must move the piece somewhere else!"
        print(this)
      elif eval(piece_moveto) in pieces_player1 or eval(piece_moveto) in pieces_player2:
        message="You cant move pieces onto other pieces!"
        print(this)
      elif eval(piece_moveto)==["R"]:
        message="You can only move onto black squares!"
        print(this)
      elif piece_moveto not in squares_adjacent_open and piece_moveto not in pieces_jumpable_open:
        message="You cant move that piece there!"
        print(this)
      message=''
      break
    except:
      pass
  if eval(piece_selection)==["ùïè"]:
    eval(board[board.index(piece_moveto)])[0]="ùïè"
  else:
    eval(board[board.index(piece_moveto)])[0]="X"
  eval(board[board.index(piece_selection)])[0]="B"
  if piece_moveto in pieces_jumpable_open:
    for i in range(0,4):
      if piece_moveto==pieces_jumpable_open[i]:
        eval(board[board.index(pieces_jumpable[i])])[0]="B"

def player2_turn():
  global piece_selection
  global piece_moveto
  global message
  print(message)
  while True:
    try:
      piece_selection=input().lower()
      if piece_selection=="quit()" or piece_selection not in board:
        message="That is not a place on the board!"
        print(this)
      elif eval(piece_selection) in pieces_player1:
        message="That is not your piece!"
        print(this)
      elif eval(piece_selection)==["R"]:
        message="There arent any pieces on red squares!"
        print(this)
      elif eval(piece_selection)==["B"]:
        message="You dont have a piece on that square!"
        print(this)
      check_squares_adjacent_open()
      check_pieces_jumpable_open()
      if squares_adjacent_open==['','','',''] and pieces_jumpable_open==['','','','']:
        message="There are no open squares for that piece to move to!"
        print(this)
      message=''
      break
    except:
      clear()
      print_help()
      print_board()
      print(message)
  while True:
    try:
      clear()
      print_help()
      print_board()
      print("Selected "+piece_selection.upper())
      print(message)
      piece_moveto=input().lower()
      if piece_moveto=="quit()" or piece_moveto not in board:
        message="That is not a place on the board!"
        print(this)
      elif piece_selection==piece_moveto:
        message="You must move the piece somewhere else!"
        print(this)
      elif eval(piece_moveto) in pieces_player1 or eval(piece_moveto) in pieces_player2:
        message="You cant move pieces onto other pieces!"
        print(this)
      elif eval(piece_moveto)==["R"]:
        message="You can only move onto black squares!"
        print(this)
      elif piece_moveto not in squares_adjacent_open and piece_moveto not in pieces_jumpable_open:
        message="You cant move that piece there!"
        print(this)
      message=''
      break
    except:
      pass
  if eval(piece_selection)==["ùïÜ"]:
    eval(board[board.index(piece_moveto)])[0]="ùïÜ"
  else:
    eval(board[board.index(piece_moveto)])[0]="O"
  eval(board[board.index(piece_selection)])[0]="B"
  if piece_moveto in pieces_jumpable_open:
    for i in range(0,4):
      if piece_moveto==pieces_jumpable_open[i]:
        eval(board[board.index(pieces_jumpable[i])])[0]="B"

while playercount not in ["1","2"]:
  clear()
  print_help_playercount()
  print_board()
  playercount=input()
playercount=eval(playercount)

while finished==0:
  check_finished()
  if finished==1:
    break
  check_king()
  clear()
  print_help()
  print_board()
  if player_turn==1:
    message="It is player 1's turn"
    player1_turn()
    player_turn=2
  elif player_turn==2:
    message="It is player 2's turn"
    player2_turn()
    player_turn=1
  clear()
  print_help()
  print_board()

if P2_lose==True:
  print("Player 1 wins!")
elif P1_lose==True:
  print("Player 2 wins!")
