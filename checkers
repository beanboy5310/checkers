#checkers :)
#im terrible at optimization

import time
import random
import os
import sys
from termcolor import *

def wait(x):
  time.sleep(x)

def clear():
  if os.name=="nt":    
    c=os.system("cls")
  else:
    c=os.system("clear")
  del c

#8| A8 B8 C8 D8 E8 F8 G8 H8
#7| A7 B7 C7 D7 E7 F7 G7 H7
#6| A6 B6 C6 D6 E6 F6 G6 H6
#5| A5 B5 C5 D5 E5 F5 G5 H5
#4| A4 B4 C4 D4 E4 F4 G4 H4
#3| A3 B3 C3 D3 E3 F3 G3 H3
#2| A2 B2 C2 D2 E2 F2 G2 H2
#1| A1 B1 C1 D1 E1 F1 G1 H1
#  ________________________
#  A  B  C  D  E  F  G  H
message=''
a="1"
b="2"
c="3"
d="4"
e="5"
f="6"
g="7"
h="8"
array_abc=["a","b","c","d","e","f","g","h"]
array_123=["1","2","3","4","5","6","7","8"]
adjacent_squares=[]
adjacent_squares_open=[]
a8="R";b8="O";c8="R";d8="O";e8="R";f8="O";g8="R";h8="O"
a7="O";b7="R";c7="O";d7="R";e7="O";f7="R";g7="O";h7="R"
a6="R";b6="O";c6="R";d6="O";e6="R";f6="O";g6="R";h6="O"
a5="B";b5="R";c5="B";d5="R";e5="B";f5="R";g5="B";h5="R"
a4="R";b4="B";c4="R";d4="B";e4="R";f4="B";g4="R";h4="B"
a3="X";b3="R";c3="X";d3="R";e3="X";f3="R";g3="X";h3="R"
a2="R";b2="X";c2="R";d2="X";e2="R";f2="X";g2="R";h2="X"
a1="X";b1="R";c1="X";d1="R";e1="X";f1="R";g1="X";h1="R"

board=["a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1"]

def print_board():
  cprint("   "*10,"grey","on_white")
  for n in range(0,8):
    cprint(" "+array_123[-n-1]+" ","grey","on_white",end='')
    for i in range(0,8):
      if eval(array_abc[i]+array_123[-n-1])=="R":
        cprint("   ",None,"on_red",end='')
      elif eval(array_abc[i]+array_123[-n-1])=="B":
        cprint("   ",None,None,end='')
      else:
        cprint(" "+eval(array_abc[i]+array_123[-n-1])+" ",None,None,end='')
    cprint("   ","grey","on_white",end="\n")
  cprint("   ","grey","on_white",end='')
  for i in range(0,8):
    cprint(" "+array_abc[i].upper()+" ","grey","on_white",end='')
  cprint("   ","grey","on_white",end="\n")

while True:
  try:
    clear()
    print_board()
    print(message)
    piece_select=input()
    if piece_select.lower() in board:
      if eval(piece_select.lower())=="X":
        for i in range(1,8):
          temp_str=piece_select.split(str(i))
          if len(temp_str)==2:
            piece_select_abc=temp_str[0]
            break
        for n in range(1,8):
          temp_str=piece_select.split(str(array_abc[n-1]))
          if len(temp_str)==2:
            piece_select_123=temp_str[1]
            break
        adjacent_squares_LU=array_abc[array_abc.index(piece_select_abc)-1]+array_123[array_123.index(piece_select_123)+1]
        adjacent_squares_LD=array_abc[array_abc.index(piece_select_abc)-1]+array_123[array_123.index(piece_select_123)-1]
        adjacent_squares_RU=array_abc[array_abc.index(piece_select_abc)+1]+array_123[array_123.index(piece_select_123)+1]
        adjacent_squares_RD=array_abc[array_abc.index(piece_select_abc)+1]+array_123[array_123.index(piece_select_123)-1]
        no_L=False
        no_R=False
        no_D=False
        no_U=False

        if piece_select_abc=="a":
          no_L=True
        if piece_select_abc=="h":
          no_R=True
        if piece_select_123=="1":
          no_D=True
        if piece_select_123=="8":
          no_U=True

        if no_L==False and no_U==False:
          adjacent_squares.append(adjacent_squares_LU)
        if no_L==False and no_D==False:
          adjacent_squares.append(adjacent_squares_LD)
        if no_R==False and no_U==False:
          adjacent_squares.append(adjacent_squares_RU)
        if no_R==False and no_D==False:
          adjacent_squares.append(adjacent_squares_RD)

        for i in range(0,len(adjacent_squares)):
          if eval(adjacent_squares[i])=="B":
            adjacent_squares_open.append(adjacent_squares[i])

        if len(adjacent_squares_open)==0:
          message="There are no open spaces for that piece to move to."
        else:
          message="Piece selected is "+piece_select.upper()
          break
      elif eval(piece_select.lower())=="O":
        message="That piece does not belong to you."
      else:
        message="There is no piece on that position."
    else:
      message="That is not a position on the board (Use A1, B2, etc.)"
  except:
    pass


while True:
  try:
    clear()
    print_board()
    print(message)
    piece_move=input()
    if piece_move.lower() in board:
      if eval(piece_move.lower())=="B":
        message="Moving piece to "+piece_move.upper()
        break
      elif eval(piece_move.lower())=="R":
        message="You cant move pieces onto red squares."
      elif eval(piece_move.lower())=="X" or eval(piece_move.lower())=="O":
        message="You can only move pieces onto open squares."
    else:
      message="That is not a position on the board (Use A1, B2, etc.)"
  except:
    pass

